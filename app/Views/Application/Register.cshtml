@model Microsoft.Azure.IIoT.OpcUa.Services.Vault.App.Models.ApplicationRecordRegisterApiModel

@{
    ViewBag.Title = "Application";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@if (Model.ApplicationId == null)
{
    <h2>Register New OPC UA Application</h2>
}
else
{
    <h2>Update OPC UA Application</h2>
}

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    @Html.ValidationSummary(true)

    <div class="form-horizontal">
        <hr />
        @Html.HiddenFor(model => model.ApplicationId)
        @for (int i = 0; i < Model.ApplicationNames.Count(); i++)
        {
            @Html.HiddenFor(model => Model.ApplicationNames[i]);
            @Html.HiddenFor(model => Model.ApplicationNames[i].Text);
            @Html.HiddenFor(model => Model.ApplicationNames[i].Locale);
        }
        @Html.HiddenFor(model => model.GatewayServerUri)
        @Html.HiddenFor(model => model.DiscoveryProfileUri)

        <!--<a href="#" data-toggle="tooltip" data-placement="top" title="Hooray!">-->
        <div class="form-group">
            @Html.LabelFor(model => model.ApplicationUri, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-9">
                @Html.EditorFor(model => model.ApplicationUri, new { htmlAttributes = new { @class = "form-control", placeholder = "The Application Uri that identifies the Application", aria_describedby = "appuri-format" } })
                <label id="ApplicationUri" class="sr-only">Application Uri</label>
                @Html.ValidationMessageFor(model => model.ApplicationUri, "", new { @class = "text-danger" })
                <span id="appuri-format">Example: <kbd>urn:myserver:UA:Quickstarts:ReferenceServer</kbd></span>
            </div>
            <input type="submit" name="find" value="Load" class="btn btn-default" />
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.ApplicationName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.ApplicationName, new { htmlAttributes = new { @class = "form-control", placeholder = "The friendly Name for the Application", aria_describedby = "appname-format" } })
                @Html.ValidationMessageFor(model => model.ApplicationName, "", new { @class = "text-danger" })
                <span id="appname-format">Example: <kbd>Quickstart Reference Server</kbd></span>
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ApplicationType, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <div class="checkbox">
                    @Html.DropDownListFor(
       model => model.ApplicationType,
       new SelectList(
           new List<Object>{
                                new { value = Microsoft.Azure.IIoT.OpcUa.Api.Vault.Models.ApplicationType.Server ,
                                    text = Microsoft.Azure.IIoT.OpcUa.Api.Vault.Models.ApplicationType.Server.ToString() },
                                new { value = Microsoft.Azure.IIoT.OpcUa.Api.Vault.Models.ApplicationType.Client ,
                                    text = Microsoft.Azure.IIoT.OpcUa.Api.Vault.Models.ApplicationType.Client.ToString() },
                                new { value = Microsoft.Azure.IIoT.OpcUa.Api.Vault.Models.ApplicationType.ClientAndServer ,
                                    text = Microsoft.Azure.IIoT.OpcUa.Api.Vault.Models.ApplicationType.ClientAndServer.ToString() },
                                new { value = Microsoft.Azure.IIoT.OpcUa.Api.Vault.Models.ApplicationType.DiscoveryServer ,
                                    text = Microsoft.Azure.IIoT.OpcUa.Api.Vault.Models.ApplicationType.DiscoveryServer.ToString() },
           },
       "value",
       "text",
       Model.ApplicationType
       ),
       "-select-",
       new { @onchange = "this.form.submit();" })
                    @Html.ValidationMessageFor(model => model.ApplicationType, "", new { @class = "text-danger" })
                </div>
                <span id="apptype-format">Choose an application type</span>
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ProductUri, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.ProductUri, new { htmlAttributes = new { @class = "form-control", placeholder = "The Uri for the product associated with the Application", aria_describedby = "producturi-format" } })
                @Html.ValidationMessageFor(model => model.ProductUri, "", new { @class = "text-danger" })
                <span id="producturi-format">Example: <kbd>uri:opcfoundation.org:Quickstarts:ReferenceServer</kbd></span>
            </div>
        </div>

        @if (Model.ApplicationType != Microsoft.Azure.IIoT.OpcUa.Api.Vault.Models.ApplicationType.Client)
        {
            @for (int i = 0; i < Model.DiscoveryUrls.Count(); i++)
            {
                <div class="form-group">
                    @if (i == 0)
                    {
                        @Html.LabelFor(model => model.DiscoveryUrls, htmlAttributes: new { @class = "control-label col-md-2" })
                    }
                    else
                    {
                        <div class="control-label col-md-2">
                        </div>
                    }
                    <div class="col-md-10">
                        @Html.EditorFor(model => Model.DiscoveryUrls[i], new { htmlAttributes = new { @class = "form-control", placeholder = "Discovery Url", aria_describedby = "url-format" } })
                        @Html.ValidationMessageFor(model => Model.DiscoveryUrls[i], "", new { @class = "text-danger" })
                        @if (i + 1 == Model.DiscoveryUrls.Count())
                        {
                            <span id="url-format">One or more server endpoints: e.g. <kbd>opc.tcp://myserver:62541/Quickstarts/ReferenceServer</kbd> or <kbd>https://myserver:62540/Quickstarts/ReferenceServer</kbd></span><br />
                            <input type="submit" name="add" value="Add DiscoveryUrl Field" class="btn btn-default">
                            <input type="submit" name="del" value="Remove Empty DiscoveryUrl Fields" class="btn btn-default">
                        }
                    </div>
                </div>
            }
            <div class="form-group">
                @Html.LabelFor(model => model.ServerCapabilities, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.ServerCapabilities, new { htmlAttributes = new { @class = "form-control", placeholder = "Server Capabilities", aria_describedby = "caps-format" } })
                    @Html.ValidationMessageFor(model => model.ServerCapabilities, "", new { @class = "text-danger" })
                    <span id="caps-format">One or more Server Capabilities: <kbd>NA,DA,HD,AC,HE,GDS,LDS...</kbd></span>
                </div>
            </div>
        }
        else
        {
            @Html.HiddenFor(model => Model.ServerCapabilities);
            @if (Model.DiscoveryUrls != null)
            {
                @for (int i = 0; i < Model.DiscoveryUrls.Count(); i++)
                {
                    @Html.HiddenFor(model => Model.DiscoveryUrls[i]);
                }
            }
        }
        @if (ViewData["ErrorMessage"] != null)
        {
            <hr />
            <div class="alert alert-warning">
                <h4>@ViewData["ErrorMessage"]</h4>
            </div>
            <hr />
        }

        @if (ViewData["SuccessMessage"] != null)
        {
            <hr />
            <div class="alert alert-success">
                <h4>@ViewData["SuccessMessage"]</h4>
            </div>
            <hr />
        }
        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                @if (Model.ApplicationId != null)
                {
                    <input type="submit" name="reg" value="Update" class="btn btn-default" />
                    <input type="submit" name="req" value="Request without Update" class="btn btn-default" />
                }
                else
                {
                    <input type="submit" name="reg" value="Register" class="btn btn-default" />
                }
                @Html.ActionLink("Clear Form", "Register", new { id = "" }, new { @class = "btn btn-default" })
            </div>
        </div>
    </div>
}

<div>
    <hr />
    <img src="~/images/opcvaultflowstep1.svg" alt="OpcVault Registration" class="img-responsive" />
    <hr />
    @Html.ActionLink("Back to Register New", "Register", new { id = "" })
</div>


