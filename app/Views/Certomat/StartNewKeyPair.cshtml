@model Microsoft.Azure.IIoT.OpcUa.Services.Vault.App.Models.CreateNewKeyPairRequestFormApiModel

@{
    ViewBag.Title = "Start New Key Pair Request";
    Layout = "~/Views/Shared/_Layout.cshtml";
    Microsoft.Azure.IIoT.OpcUa.Api.Vault.Models.ApplicationRecordApiModel application = (Microsoft.Azure.IIoT.OpcUa.Api.Vault.Models.ApplicationRecordApiModel)ViewBag.Application;
}

<h2>Generate a new KeyPair and Certificate for an OPC UA Application</h2>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })

        @Html.HiddenFor(model => model.ApplicationId)
        @Html.HiddenFor(model => model.CertificateGroupId)
        @Html.HiddenFor(model => model.CertificateTypeId)

        <div class="form-group">
            <div class="col-md-2">
                @Html.LabelFor(model => application.ApplicationUri, htmlAttributes: new { @class = "pull-right" })
            </div>
            <div class="col-md-10">
                @Html.DisplayFor(model => application.ApplicationUri)
            </div>
        </div>
        <div class="form-group">
            <div class="col-md-2">
                @Html.LabelFor(model => application.ApplicationName, htmlAttributes: new { @class = "pull-right" })
            </div>
            <div class="col-md-10">
                @Html.DisplayFor(model => application.ApplicationName)
            </div>
        </div>
        <div class="form-group">
            <div class="col-md-2">
                @Html.LabelFor(model => model.CertificateGroupId, htmlAttributes: new { @class = "pull-right" })
            </div>
            <div class="col-md-10">
                @Html.DisplayFor(model => model.CertificateGroupId)
            </div>
        </div>
        <div class="form-group">
            <div class="col-md-2">
                @Html.LabelFor(model => model.CertificateTypeId, htmlAttributes: new { @class = "pull-right" })
            </div>
            <div class="col-md-10">
                @Html.DisplayFor(model => model.CertificateTypeId)
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.SubjectName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.SubjectName, new { htmlAttributes = new { @class = "form-control", aria_describedby = "subjectname-format", placeholder = "Certificate Subject as Distinguished Name" } })
                @Html.ValidationMessageFor(model => model.SubjectName, "", new { @class = "text-danger" })
                <span id="subjectname-format">Example: <kbd>CN=My Reference Server, O=Microsoft Corp.</kbd></span>
            </div>
        </div>
        @if (Model.DomainNames != null)
        {
            @for (int i = 0; i < Model.DomainNames.Count(); i++)
            {
                <div class="form-group">
                    @if (i == 0)
                    {
                        @Html.LabelFor(model => model.DomainNames, htmlAttributes: new { @class = "control-label col-md-2" })
                    }
                    else
                    {
                        <div class="control-label col-md-2">
                        </div>
                    }
                    <div class="col-md-10">
                        @Html.EditorFor(model => Model.DomainNames[i], new { htmlAttributes = new { @class = "form-control", placeholder = "A Domain Name or IP Address", aria_describedby = "domain-format" } })
                        @Html.ValidationMessageFor(model => Model.DomainNames[i], "", new { @class = "text-danger" })
                        @if (i + 1 == Model.DomainNames.Count())
                        {
                            <span id="domain-format">Domain Names, Ipv4 or Ipv6 addresses: <kbd>myserver</kbd> or <kbd>192.168.2.123</kbd> or <kbd>fe80::4120:3a3b:df38</kbd></span><br />
                            <input type="submit" name="add" value="Add Domain Field" class="btn btn-default">
                            <input type="submit" name="del" value="Remove Empty Domain Fields" class="btn btn-default">
                        }
                    </div>
                </div>
            }
        }
        <div class="form-group">
            @Html.LabelFor(model => model.PrivateKeyFormat, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <div class="checkbox">
                    @Html.DropDownListFor(
                        model => model.PrivateKeyFormat,
                        new SelectList(
                            new List<Object>{
                                new { value = "PEM" , text = "PEM"  },
                                new { value = "PFX" , text = "PFX" }
                            },
                        "value",
                        "text",
                        Model.PrivateKeyFormat
                        ),
                        "-select-")
                    @Html.ValidationMessageFor(model => model.PrivateKeyFormat, "", new { @class = "text-danger" })
                </div>
                <span id="pktype-format">Choose private key format for download.</span>
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.PrivateKeyPassword, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.PrivateKeyPassword, new { htmlAttributes = new { @class = "form-control", placeholder = "Password" } })
                @Html.ValidationMessageFor(model => model.PrivateKeyPassword, "", new { @class = "text-danger" })
                <span id="pktype-format">Password to protect your private key.</span>
            </div>
        </div>

        @if (ViewData["ErrorMessage"] != null)
        {
            <hr />
            <div class="alert alert-warning">
                <h4>@ViewData["ErrorMessage"]</h4>
            </div>
            <hr />
        }

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Generate New KeyPair" class="btn btn-default" />
            </div>
        </div>
    </div>
}

    <div>
        <hr />
        <img src="~/images/opcvaultflowstep2.svg" alt="OpcVault Request" class="img-responsive" />
        <hr />
        @Html.ActionLink("Back to Register New", "Register", routeValues: new { id = "" })
    </div>

