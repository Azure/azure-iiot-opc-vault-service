// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator 1.0.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.IIoT.OpcUa.Api.Vault.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    public partial class CertificateGroupConfigurationApiModel
    {
        /// <summary>
        /// Initializes a new instance of the
        /// CertificateGroupConfigurationApiModel class.
        /// </summary>
        public CertificateGroupConfigurationApiModel()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the
        /// CertificateGroupConfigurationApiModel class.
        /// </summary>
        /// <param name="name">The name of the certificate group, ofter
        /// referred to as group id.</param>
        /// <param name="certificateType">The certificate type as specified in
        /// the OPC UA spec 1.04.
        /// supported values:
        /// - RsaSha256ApplicationCertificateType (default)
        /// - ApplicationCertificateType</param>
        /// <param name="subjectName">The subject as distinguished
        /// name.</param>
        /// <param name="defaultCertificateLifetime">The default certificate
        /// lifetime in months.
        /// Default: 24 months.</param>
        /// <param name="defaultCertificateKeySize">The default certificate key
        /// size in bits.
        /// Allowed values: 2048, 3072, 4096</param>
        /// <param name="defaultCertificateHashSize">The default certificate
        /// SHA-2 hash size in bits.
        /// Allowed values: 256 (default), 384, 512</param>
        /// <param name="issuerCACertificateLifetime">The default issuer CA
        /// certificate lifetime in months.
        /// Default: 60 months.</param>
        /// <param name="issuerCACertificateKeySize">The default issuer CA
        /// certificate key size in bits.
        /// Allowed values: 2048, 3072, 4096</param>
        /// <param name="issuerCACertificateHashSize">The default issuer CA
        /// certificate key size in bits.
        /// Allowed values: 2048, 3072, 4096</param>
        /// <param name="issuerCACRLDistributionPoint">The endpoint URL for the
        /// CRL Distributionpoint in the Issuer CA certificate.
        /// The names %servicehost%, %serial% and %group% are replaced with
        /// cert values.
        /// default:
        /// 'http://%servicehost%/certs/crl/%serial%/%group%.crl'</param>
        /// <param name="issuerCAAuthorityInformationAccess">The endpoint URL
        /// for the Issuer CA Authority Information Access.
        /// The names %servicehost%, %serial% and %group% are replaced with
        /// cert values.
        /// default:
        /// 'http://%servicehost%/certs/issuer/%serial%/%group%.cer'</param>
        public CertificateGroupConfigurationApiModel(string name, string certificateType, string subjectName, int defaultCertificateLifetime, int defaultCertificateKeySize, int defaultCertificateHashSize, int issuerCACertificateLifetime, int issuerCACertificateKeySize, int issuerCACertificateHashSize, string issuerCACRLDistributionPoint = default(string), string issuerCAAuthorityInformationAccess = default(string))
        {
            Name = name;
            CertificateType = certificateType;
            SubjectName = subjectName;
            DefaultCertificateLifetime = defaultCertificateLifetime;
            DefaultCertificateKeySize = defaultCertificateKeySize;
            DefaultCertificateHashSize = defaultCertificateHashSize;
            IssuerCACertificateLifetime = issuerCACertificateLifetime;
            IssuerCACertificateKeySize = issuerCACertificateKeySize;
            IssuerCACertificateHashSize = issuerCACertificateHashSize;
            IssuerCACRLDistributionPoint = issuerCACRLDistributionPoint;
            IssuerCAAuthorityInformationAccess = issuerCAAuthorityInformationAccess;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the name of the certificate group, ofter referred to
        /// as group id.
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets the certificate type as specified in the OPC UA spec
        /// 1.04.
        /// supported values:
        /// - RsaSha256ApplicationCertificateType (default)
        /// - ApplicationCertificateType
        /// </summary>
        [JsonProperty(PropertyName = "certificateType")]
        public string CertificateType { get; set; }

        /// <summary>
        /// Gets or sets the subject as distinguished name.
        /// </summary>
        [JsonProperty(PropertyName = "subjectName")]
        public string SubjectName { get; set; }

        /// <summary>
        /// Gets or sets the default certificate lifetime in months.
        /// Default: 24 months.
        /// </summary>
        [JsonProperty(PropertyName = "defaultCertificateLifetime")]
        public int DefaultCertificateLifetime { get; set; }

        /// <summary>
        /// Gets or sets the default certificate key size in bits.
        /// Allowed values: 2048, 3072, 4096
        /// </summary>
        [JsonProperty(PropertyName = "defaultCertificateKeySize")]
        public int DefaultCertificateKeySize { get; set; }

        /// <summary>
        /// Gets or sets the default certificate SHA-2 hash size in bits.
        /// Allowed values: 256 (default), 384, 512
        /// </summary>
        [JsonProperty(PropertyName = "defaultCertificateHashSize")]
        public int DefaultCertificateHashSize { get; set; }

        /// <summary>
        /// Gets or sets the default issuer CA certificate lifetime in months.
        /// Default: 60 months.
        /// </summary>
        [JsonProperty(PropertyName = "issuerCACertificateLifetime")]
        public int IssuerCACertificateLifetime { get; set; }

        /// <summary>
        /// Gets or sets the default issuer CA certificate key size in bits.
        /// Allowed values: 2048, 3072, 4096
        /// </summary>
        [JsonProperty(PropertyName = "issuerCACertificateKeySize")]
        public int IssuerCACertificateKeySize { get; set; }

        /// <summary>
        /// Gets or sets the default issuer CA certificate key size in bits.
        /// Allowed values: 2048, 3072, 4096
        /// </summary>
        [JsonProperty(PropertyName = "issuerCACertificateHashSize")]
        public int IssuerCACertificateHashSize { get; set; }

        /// <summary>
        /// Gets or sets the endpoint URL for the CRL Distributionpoint in the
        /// Issuer CA certificate.
        /// The names %servicehost%, %serial% and %group% are replaced with
        /// cert values.
        /// default: 'http://%servicehost%/certs/crl/%serial%/%group%.crl'
        /// </summary>
        [JsonProperty(PropertyName = "issuerCACRLDistributionPoint")]
        public string IssuerCACRLDistributionPoint { get; set; }

        /// <summary>
        /// Gets or sets the endpoint URL for the Issuer CA Authority
        /// Information Access.
        /// The names %servicehost%, %serial% and %group% are replaced with
        /// cert values.
        /// default: 'http://%servicehost%/certs/issuer/%serial%/%group%.cer'
        /// </summary>
        [JsonProperty(PropertyName = "issuerCAAuthorityInformationAccess")]
        public string IssuerCAAuthorityInformationAccess { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Name == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Name");
            }
            if (CertificateType == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "CertificateType");
            }
            if (SubjectName == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "SubjectName");
            }
        }
    }
}
