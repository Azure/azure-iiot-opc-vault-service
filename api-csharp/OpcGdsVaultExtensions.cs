// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator 2.4.43.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.IIoT.OpcUa.Services.GdsVault.Api
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for OpcGdsVault.
    /// </summary>
    public static partial class OpcGdsVaultExtensions
    {
            /// <summary>
            /// Register new application.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='application'>
            /// </param>
            public static string RegisterApplication(this IOpcGdsVault operations, ApplicationRecordApiModel application = default(ApplicationRecordApiModel))
            {
                return operations.RegisterApplicationAsync(application).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Register new application.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='application'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> RegisterApplicationAsync(this IOpcGdsVault operations, ApplicationRecordApiModel application = default(ApplicationRecordApiModel), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.RegisterApplicationWithHttpMessagesAsync(application, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get application
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='applicationId'>
            /// </param>
            public static ApplicationRecordApiModel GetApplication(this IOpcGdsVault operations, string applicationId)
            {
                return operations.GetApplicationAsync(applicationId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get application
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='applicationId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ApplicationRecordApiModel> GetApplicationAsync(this IOpcGdsVault operations, string applicationId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetApplicationWithHttpMessagesAsync(applicationId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update application.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='applicationId'>
            /// </param>
            /// <param name='application'>
            /// </param>
            public static string UpdateApplication(this IOpcGdsVault operations, string applicationId, ApplicationRecordApiModel application = default(ApplicationRecordApiModel))
            {
                return operations.UpdateApplicationAsync(applicationId, application).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update application.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='applicationId'>
            /// </param>
            /// <param name='application'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> UpdateApplicationAsync(this IOpcGdsVault operations, string applicationId, ApplicationRecordApiModel application = default(ApplicationRecordApiModel), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateApplicationWithHttpMessagesAsync(applicationId, application, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Unregister application
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='applicationId'>
            /// </param>
            public static void UnregisterApplication(this IOpcGdsVault operations, string applicationId)
            {
                operations.UnregisterApplicationAsync(applicationId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Unregister application
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='applicationId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task UnregisterApplicationAsync(this IOpcGdsVault operations, string applicationId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.UnregisterApplicationWithHttpMessagesAsync(applicationId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Find applications
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='uri'>
            /// </param>
            public static IList<ApplicationRecordApiModel> FindApplication(this IOpcGdsVault operations, string uri)
            {
                return operations.FindApplicationAsync(uri).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Find applications
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='uri'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<ApplicationRecordApiModel>> FindApplicationAsync(this IOpcGdsVault operations, string uri, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.FindApplicationWithHttpMessagesAsync(uri, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Query applications
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='query'>
            /// </param>
            public static QueryApplicationsResponseApiModel QueryApplications(this IOpcGdsVault operations, QueryApplicationsApiModel query = default(QueryApplicationsApiModel))
            {
                return operations.QueryApplicationsAsync(query).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Query applications
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='query'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<QueryApplicationsResponseApiModel> QueryApplicationsAsync(this IOpcGdsVault operations, QueryApplicationsApiModel query = default(QueryApplicationsApiModel), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.QueryApplicationsWithHttpMessagesAsync(query, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static CertificateGroupListApiModel GetCertificateGroupIds(this IOpcGdsVault operations)
            {
                return operations.GetCertificateGroupIdsAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CertificateGroupListApiModel> GetCertificateGroupIdsAsync(this IOpcGdsVault operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetCertificateGroupIdsWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get group configuration
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// </param>
            public static CertificateGroupConfigurationApiModel GetCertificateGroupConfiguration(this IOpcGdsVault operations, string groupId)
            {
                return operations.GetCertificateGroupConfigurationAsync(groupId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get group configuration
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CertificateGroupConfigurationApiModel> GetCertificateGroupConfigurationAsync(this IOpcGdsVault operations, string groupId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetCertificateGroupConfigurationWithHttpMessagesAsync(groupId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get group configuration
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static CertificateGroupConfigurationCollectionApiModel GetCertificateGroupConfigurationCollection(this IOpcGdsVault operations)
            {
                return operations.GetCertificateGroupConfigurationCollectionAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get group configuration
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CertificateGroupConfigurationCollectionApiModel> GetCertificateGroupConfigurationCollectionAsync(this IOpcGdsVault operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetCertificateGroupConfigurationCollectionWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get CA Certificate chain
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// </param>
            public static X509Certificate2CollectionApiModel GetCACertificateChain(this IOpcGdsVault operations, string groupId)
            {
                return operations.GetCACertificateChainAsync(groupId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get CA Certificate chain
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<X509Certificate2CollectionApiModel> GetCACertificateChainAsync(this IOpcGdsVault operations, string groupId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetCACertificateChainWithHttpMessagesAsync(groupId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get CA CRL chain
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// </param>
            public static X509CrlCollectionApiModel GetCACrlChain(this IOpcGdsVault operations, string groupId)
            {
                return operations.GetCACrlChainAsync(groupId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get CA CRL chain
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<X509CrlCollectionApiModel> GetCACrlChainAsync(this IOpcGdsVault operations, string groupId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetCACrlChainWithHttpMessagesAsync(groupId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get trust list
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// </param>
            public static TrustListApiModel GetTrustList(this IOpcGdsVault operations, string groupId)
            {
                return operations.GetTrustListAsync(groupId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get trust list
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<TrustListApiModel> GetTrustListAsync(this IOpcGdsVault operations, string groupId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetTrustListWithHttpMessagesAsync(groupId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create new CA Certificate
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// </param>
            public static X509Certificate2ApiModel CreateCACertificate(this IOpcGdsVault operations, string groupId)
            {
                return operations.CreateCACertificateAsync(groupId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create new CA Certificate
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<X509Certificate2ApiModel> CreateCACertificateAsync(this IOpcGdsVault operations, string groupId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateCACertificateWithHttpMessagesAsync(groupId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Start a new signing request.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='signingRequest'>
            /// </param>
            public static string StartSigningRequest(this IOpcGdsVault operations, StartSigningRequestApiModel signingRequest = default(StartSigningRequestApiModel))
            {
                return operations.StartSigningRequestAsync(signingRequest).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Start a new signing request.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='signingRequest'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> StartSigningRequestAsync(this IOpcGdsVault operations, StartSigningRequestApiModel signingRequest = default(StartSigningRequestApiModel), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.StartSigningRequestWithHttpMessagesAsync(signingRequest, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Start a new key pair request.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='newKeyPairRequest'>
            /// </param>
            public static string StartNewKeyPairRequest(this IOpcGdsVault operations, StartNewKeyPairRequestApiModel newKeyPairRequest = default(StartNewKeyPairRequestApiModel))
            {
                return operations.StartNewKeyPairRequestAsync(newKeyPairRequest).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Start a new key pair request.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='newKeyPairRequest'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> StartNewKeyPairRequestAsync(this IOpcGdsVault operations, StartNewKeyPairRequestApiModel newKeyPairRequest = default(StartNewKeyPairRequestApiModel), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.StartNewKeyPairRequestWithHttpMessagesAsync(newKeyPairRequest, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Approve request.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='requestId'>
            /// </param>
            /// <param name='rejected'>
            /// </param>
            public static void ApproveCertificateRequest(this IOpcGdsVault operations, string requestId, bool rejected)
            {
                operations.ApproveCertificateRequestAsync(requestId, rejected).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Approve request.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='requestId'>
            /// </param>
            /// <param name='rejected'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApproveCertificateRequestAsync(this IOpcGdsVault operations, string requestId, bool rejected, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ApproveCertificateRequestWithHttpMessagesAsync(requestId, rejected, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Accept request.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='requestId'>
            /// </param>
            public static void AcceptCertificateRequest(this IOpcGdsVault operations, string requestId)
            {
                operations.AcceptCertificateRequestAsync(requestId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Accept request.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='requestId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task AcceptCertificateRequestAsync(this IOpcGdsVault operations, string requestId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.AcceptCertificateRequestWithHttpMessagesAsync(requestId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Query certificate requests
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static QueryRequestsResponseApiModel QueryRequests(this IOpcGdsVault operations)
            {
                return operations.QueryRequestsAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Query certificate requests
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<QueryRequestsResponseApiModel> QueryRequestsAsync(this IOpcGdsVault operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.QueryRequestsWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Query certificate requests by appId
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='appId'>
            /// </param>
            public static QueryRequestsResponseApiModel QueryAppRequests(this IOpcGdsVault operations, string appId)
            {
                return operations.QueryAppRequestsAsync(appId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Query certificate requests by appId
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='appId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<QueryRequestsResponseApiModel> QueryAppRequestsAsync(this IOpcGdsVault operations, string appId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.QueryAppRequestsWithHttpMessagesAsync(appId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Query certificate requests by state
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='state'>
            /// </param>
            public static QueryRequestsResponseApiModel QueryAppRequests1(this IOpcGdsVault operations, string state)
            {
                return operations.QueryAppRequests1Async(state).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Query certificate requests by state
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='state'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<QueryRequestsResponseApiModel> QueryAppRequests1Async(this IOpcGdsVault operations, string state, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.QueryAppRequests1WithHttpMessagesAsync(state, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Read certificate request
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='requestId'>
            /// </param>
            public static CertificateRequestRecordApiModel ReadCertificateRequest(this IOpcGdsVault operations, string requestId)
            {
                return operations.ReadCertificateRequestAsync(requestId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Read certificate request
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='requestId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CertificateRequestRecordApiModel> ReadCertificateRequestAsync(this IOpcGdsVault operations, string requestId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReadCertificateRequestWithHttpMessagesAsync(requestId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Complete certificate request
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='requestId'>
            /// </param>
            /// <param name='applicationId'>
            /// </param>
            public static FinishRequestApiModel FinishRequest(this IOpcGdsVault operations, string requestId, string applicationId)
            {
                return operations.FinishRequestAsync(requestId, applicationId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Complete certificate request
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='requestId'>
            /// </param>
            /// <param name='applicationId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<FinishRequestApiModel> FinishRequestAsync(this IOpcGdsVault operations, string requestId, string applicationId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.FinishRequestWithHttpMessagesAsync(requestId, applicationId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static StatusApiModel GetStatus(this IOpcGdsVault operations)
            {
                return operations.GetStatusAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<StatusApiModel> GetStatusAsync(this IOpcGdsVault operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetStatusWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
