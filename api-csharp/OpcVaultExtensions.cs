// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator 1.0.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.IIoT.OpcUa.Api.Vault
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for OpcVault.
    /// </summary>
    public static partial class OpcVaultExtensions
    {
            /// <summary>
            /// Register new application.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='application'>
            /// </param>
            public static string RegisterApplication(this IOpcVault operations, ApplicationRecordApiModel application = default(ApplicationRecordApiModel))
            {
                return operations.RegisterApplicationAsync(application).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Register new application.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='application'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> RegisterApplicationAsync(this IOpcVault operations, ApplicationRecordApiModel application = default(ApplicationRecordApiModel), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.RegisterApplicationWithHttpMessagesAsync(application, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get application
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='applicationId'>
            /// </param>
            public static ApplicationRecordApiModel GetApplication(this IOpcVault operations, string applicationId)
            {
                return operations.GetApplicationAsync(applicationId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get application
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='applicationId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ApplicationRecordApiModel> GetApplicationAsync(this IOpcVault operations, string applicationId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetApplicationWithHttpMessagesAsync(applicationId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update application.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='applicationId'>
            /// </param>
            /// <param name='application'>
            /// </param>
            public static string UpdateApplication(this IOpcVault operations, string applicationId, ApplicationRecordApiModel application = default(ApplicationRecordApiModel))
            {
                return operations.UpdateApplicationAsync(applicationId, application).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update application.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='applicationId'>
            /// </param>
            /// <param name='application'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> UpdateApplicationAsync(this IOpcVault operations, string applicationId, ApplicationRecordApiModel application = default(ApplicationRecordApiModel), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateApplicationWithHttpMessagesAsync(applicationId, application, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Unregister application
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='applicationId'>
            /// </param>
            public static void UnregisterApplication(this IOpcVault operations, string applicationId)
            {
                operations.UnregisterApplicationAsync(applicationId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Unregister application
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='applicationId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task UnregisterApplicationAsync(this IOpcVault operations, string applicationId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.UnregisterApplicationWithHttpMessagesAsync(applicationId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Find applications
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='uri'>
            /// </param>
            public static IList<ApplicationRecordApiModel> FindApplication(this IOpcVault operations, string uri)
            {
                return operations.FindApplicationAsync(uri).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Find applications
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='uri'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<ApplicationRecordApiModel>> FindApplicationAsync(this IOpcVault operations, string uri, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.FindApplicationWithHttpMessagesAsync(uri, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Query applications
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='query'>
            /// </param>
            public static QueryApplicationsResponseApiModel QueryApplications(this IOpcVault operations, QueryApplicationsApiModel query = default(QueryApplicationsApiModel))
            {
                return operations.QueryApplicationsAsync(query).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Query applications
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='query'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<QueryApplicationsResponseApiModel> QueryApplicationsAsync(this IOpcVault operations, QueryApplicationsApiModel query = default(QueryApplicationsApiModel), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.QueryApplicationsWithHttpMessagesAsync(query, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Query applications
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='query'>
            /// </param>
            public static QueryApplicationsPageResponseApiModel QueryApplicationsPage(this IOpcVault operations, QueryApplicationsPageApiModel query = default(QueryApplicationsPageApiModel))
            {
                return operations.QueryApplicationsPageAsync(query).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Query applications
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='query'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<QueryApplicationsPageResponseApiModel> QueryApplicationsPageAsync(this IOpcVault operations, QueryApplicationsPageApiModel query = default(QueryApplicationsPageApiModel), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.QueryApplicationsPageWithHttpMessagesAsync(query, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static CertificateGroupListApiModel GetCertificateGroupIds(this IOpcVault operations)
            {
                return operations.GetCertificateGroupIdsAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CertificateGroupListApiModel> GetCertificateGroupIdsAsync(this IOpcVault operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetCertificateGroupIdsWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get group configuration
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// </param>
            public static CertificateGroupConfigurationApiModel GetCertificateGroupConfiguration(this IOpcVault operations, string groupId)
            {
                return operations.GetCertificateGroupConfigurationAsync(groupId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get group configuration
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CertificateGroupConfigurationApiModel> GetCertificateGroupConfigurationAsync(this IOpcVault operations, string groupId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetCertificateGroupConfigurationWithHttpMessagesAsync(groupId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update group configuration
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// </param>
            /// <param name='config'>
            /// </param>
            public static CertificateGroupConfigurationApiModel UpdateCertificateGroupConfiguration(this IOpcVault operations, string groupId, CertificateGroupConfigurationApiModel config = default(CertificateGroupConfigurationApiModel))
            {
                return operations.UpdateCertificateGroupConfigurationAsync(groupId, config).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update group configuration
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// </param>
            /// <param name='config'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CertificateGroupConfigurationApiModel> UpdateCertificateGroupConfigurationAsync(this IOpcVault operations, string groupId, CertificateGroupConfigurationApiModel config = default(CertificateGroupConfigurationApiModel), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateCertificateGroupConfigurationWithHttpMessagesAsync(groupId, config, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create new group configuration
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// </param>
            /// <param name='subject'>
            /// </param>
            /// <param name='certType'>
            /// </param>
            public static CertificateGroupConfigurationApiModel CreateCertificateGroupConfiguration(this IOpcVault operations, string groupId, string subject, string certType)
            {
                return operations.CreateCertificateGroupConfigurationAsync(groupId, subject, certType).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create new group configuration
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// </param>
            /// <param name='subject'>
            /// </param>
            /// <param name='certType'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CertificateGroupConfigurationApiModel> CreateCertificateGroupConfigurationAsync(this IOpcVault operations, string groupId, string subject, string certType, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateCertificateGroupConfigurationWithHttpMessagesAsync(groupId, subject, certType, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get group configuration
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static CertificateGroupConfigurationCollectionApiModel GetCertificateGroupConfigurationCollection(this IOpcVault operations)
            {
                return operations.GetCertificateGroupConfigurationCollectionAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get group configuration
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CertificateGroupConfigurationCollectionApiModel> GetCertificateGroupConfigurationCollectionAsync(this IOpcVault operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetCertificateGroupConfigurationCollectionWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get CA Certificate chain
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// </param>
            /// <param name='maxResults'>
            /// </param>
            public static X509Certificate2CollectionApiModel GetCACertificateChain(this IOpcVault operations, string groupId, int? maxResults = default(int?))
            {
                return operations.GetCACertificateChainAsync(groupId, maxResults).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get CA Certificate chain
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// </param>
            /// <param name='maxResults'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<X509Certificate2CollectionApiModel> GetCACertificateChainAsync(this IOpcVault operations, string groupId, int? maxResults = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetCACertificateChainWithHttpMessagesAsync(groupId, maxResults, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get CA Certificate chain
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// </param>
            /// <param name='nextPageLink'>
            /// </param>
            /// <param name='maxResults'>
            /// </param>
            public static X509Certificate2CollectionApiModel GetCACertificateChainNext(this IOpcVault operations, string groupId, string nextPageLink = default(string), int? maxResults = default(int?))
            {
                return operations.GetCACertificateChainNextAsync(groupId, nextPageLink, maxResults).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get CA Certificate chain
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// </param>
            /// <param name='nextPageLink'>
            /// </param>
            /// <param name='maxResults'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<X509Certificate2CollectionApiModel> GetCACertificateChainNextAsync(this IOpcVault operations, string groupId, string nextPageLink = default(string), int? maxResults = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetCACertificateChainNextWithHttpMessagesAsync(groupId, nextPageLink, maxResults, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get CA CRL chain
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// </param>
            /// <param name='maxResults'>
            /// </param>
            public static X509CrlCollectionApiModel GetCACrlChain(this IOpcVault operations, string groupId, int? maxResults = default(int?))
            {
                return operations.GetCACrlChainAsync(groupId, maxResults).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get CA CRL chain
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// </param>
            /// <param name='maxResults'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<X509CrlCollectionApiModel> GetCACrlChainAsync(this IOpcVault operations, string groupId, int? maxResults = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetCACrlChainWithHttpMessagesAsync(groupId, maxResults, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get CA CRL chain
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// </param>
            /// <param name='nextPageLink'>
            /// </param>
            /// <param name='maxResults'>
            /// </param>
            public static X509CrlCollectionApiModel GetCACrlChainNext(this IOpcVault operations, string groupId, string nextPageLink = default(string), int? maxResults = default(int?))
            {
                return operations.GetCACrlChainNextAsync(groupId, nextPageLink, maxResults).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get CA CRL chain
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// </param>
            /// <param name='nextPageLink'>
            /// </param>
            /// <param name='maxResults'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<X509CrlCollectionApiModel> GetCACrlChainNextAsync(this IOpcVault operations, string groupId, string nextPageLink = default(string), int? maxResults = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetCACrlChainNextWithHttpMessagesAsync(groupId, nextPageLink, maxResults, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get trust list
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// </param>
            /// <param name='maxResults'>
            /// </param>
            public static TrustListApiModel GetTrustList(this IOpcVault operations, string groupId, int? maxResults = default(int?))
            {
                return operations.GetTrustListAsync(groupId, maxResults).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get trust list
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// </param>
            /// <param name='maxResults'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<TrustListApiModel> GetTrustListAsync(this IOpcVault operations, string groupId, int? maxResults = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetTrustListWithHttpMessagesAsync(groupId, maxResults, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get trust list
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// </param>
            /// <param name='nextPageLink'>
            /// </param>
            /// <param name='maxResults'>
            /// </param>
            public static TrustListApiModel GetTrustListNext(this IOpcVault operations, string groupId, string nextPageLink = default(string), int? maxResults = default(int?))
            {
                return operations.GetTrustListNextAsync(groupId, nextPageLink, maxResults).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get trust list
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// </param>
            /// <param name='nextPageLink'>
            /// </param>
            /// <param name='maxResults'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<TrustListApiModel> GetTrustListNextAsync(this IOpcVault operations, string groupId, string nextPageLink = default(string), int? maxResults = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetTrustListNextWithHttpMessagesAsync(groupId, nextPageLink, maxResults, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create new CA Certificate
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// </param>
            public static X509Certificate2ApiModel CreateCACertificate(this IOpcVault operations, string groupId)
            {
                return operations.CreateCACertificateAsync(groupId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create new CA Certificate
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<X509Certificate2ApiModel> CreateCACertificateAsync(this IOpcVault operations, string groupId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateCACertificateWithHttpMessagesAsync(groupId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Start a new signing request.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='signingRequest'>
            /// </param>
            public static string StartSigningRequest(this IOpcVault operations, StartSigningRequestApiModel signingRequest = default(StartSigningRequestApiModel))
            {
                return operations.StartSigningRequestAsync(signingRequest).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Start a new signing request.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='signingRequest'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> StartSigningRequestAsync(this IOpcVault operations, StartSigningRequestApiModel signingRequest = default(StartSigningRequestApiModel), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.StartSigningRequestWithHttpMessagesAsync(signingRequest, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Start a new key pair request.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='newKeyPairRequest'>
            /// </param>
            public static string StartNewKeyPairRequest(this IOpcVault operations, StartNewKeyPairRequestApiModel newKeyPairRequest = default(StartNewKeyPairRequestApiModel))
            {
                return operations.StartNewKeyPairRequestAsync(newKeyPairRequest).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Start a new key pair request.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='newKeyPairRequest'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> StartNewKeyPairRequestAsync(this IOpcVault operations, StartNewKeyPairRequestApiModel newKeyPairRequest = default(StartNewKeyPairRequestApiModel), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.StartNewKeyPairRequestWithHttpMessagesAsync(newKeyPairRequest, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Approve request.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='requestId'>
            /// </param>
            /// <param name='rejected'>
            /// </param>
            public static void ApproveCertificateRequest(this IOpcVault operations, string requestId, bool rejected)
            {
                operations.ApproveCertificateRequestAsync(requestId, rejected).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Approve request.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='requestId'>
            /// </param>
            /// <param name='rejected'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApproveCertificateRequestAsync(this IOpcVault operations, string requestId, bool rejected, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ApproveCertificateRequestWithHttpMessagesAsync(requestId, rejected, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Accept request.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='requestId'>
            /// </param>
            public static void AcceptCertificateRequest(this IOpcVault operations, string requestId)
            {
                operations.AcceptCertificateRequestAsync(requestId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Accept request.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='requestId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task AcceptCertificateRequestAsync(this IOpcVault operations, string requestId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.AcceptCertificateRequestWithHttpMessagesAsync(requestId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Read certificate request
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='requestId'>
            /// </param>
            public static CertificateRequestRecordApiModel ReadCertificateRequest(this IOpcVault operations, string requestId)
            {
                return operations.ReadCertificateRequestAsync(requestId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Read certificate request
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='requestId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CertificateRequestRecordApiModel> ReadCertificateRequestAsync(this IOpcVault operations, string requestId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReadCertificateRequestWithHttpMessagesAsync(requestId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete request.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='requestId'>
            /// </param>
            public static void DeleteCertificateRequest(this IOpcVault operations, string requestId)
            {
                operations.DeleteCertificateRequestAsync(requestId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete request.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='requestId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteCertificateRequestAsync(this IOpcVault operations, string requestId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteCertificateRequestWithHttpMessagesAsync(requestId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Purge request.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='requestId'>
            /// </param>
            public static void PurgeCertificateRequest(this IOpcVault operations, string requestId)
            {
                operations.PurgeCertificateRequestAsync(requestId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Purge request.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='requestId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PurgeCertificateRequestAsync(this IOpcVault operations, string requestId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.PurgeCertificateRequestWithHttpMessagesAsync(requestId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Revoke request.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='requestId'>
            /// </param>
            public static void RevokeCertificateRequest(this IOpcVault operations, string requestId)
            {
                operations.RevokeCertificateRequestAsync(requestId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Revoke request.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='requestId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task RevokeCertificateRequestAsync(this IOpcVault operations, string requestId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.RevokeCertificateRequestWithHttpMessagesAsync(requestId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Revoke all deleted requests.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// </param>
            /// <param name='allVersions'>
            /// </param>
            public static void RevokeGroup(this IOpcVault operations, string groupId, bool? allVersions = default(bool?))
            {
                operations.RevokeGroupAsync(groupId, allVersions).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Revoke all deleted requests.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// </param>
            /// <param name='allVersions'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task RevokeGroupAsync(this IOpcVault operations, string groupId, bool? allVersions = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.RevokeGroupWithHttpMessagesAsync(groupId, allVersions, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Query certificate requests
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='appId'>
            /// </param>
            /// <param name='requestState'>
            /// </param>
            /// <param name='maxResults'>
            /// </param>
            public static CertificateRequestRecordQueryResponseApiModel QueryRequests(this IOpcVault operations, string appId = default(string), string requestState = default(string), int? maxResults = default(int?))
            {
                return operations.QueryRequestsAsync(appId, requestState, maxResults).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Query certificate requests
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='appId'>
            /// </param>
            /// <param name='requestState'>
            /// </param>
            /// <param name='maxResults'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CertificateRequestRecordQueryResponseApiModel> QueryRequestsAsync(this IOpcVault operations, string appId = default(string), string requestState = default(string), int? maxResults = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.QueryRequestsWithHttpMessagesAsync(appId, requestState, maxResults, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Query certificate requests
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// </param>
            /// <param name='appId'>
            /// </param>
            /// <param name='requestState'>
            /// </param>
            /// <param name='maxResults'>
            /// </param>
            public static CertificateRequestRecordQueryResponseApiModel QueryRequestsNext(this IOpcVault operations, string nextPageLink = default(string), string appId = default(string), string requestState = default(string), int? maxResults = default(int?))
            {
                return operations.QueryRequestsNextAsync(nextPageLink, appId, requestState, maxResults).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Query certificate requests
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// </param>
            /// <param name='appId'>
            /// </param>
            /// <param name='requestState'>
            /// </param>
            /// <param name='maxResults'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CertificateRequestRecordQueryResponseApiModel> QueryRequestsNextAsync(this IOpcVault operations, string nextPageLink = default(string), string appId = default(string), string requestState = default(string), int? maxResults = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.QueryRequestsNextWithHttpMessagesAsync(nextPageLink, appId, requestState, maxResults, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Complete certificate request
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='requestId'>
            /// </param>
            /// <param name='applicationId'>
            /// </param>
            public static FinishRequestApiModel FinishRequest(this IOpcVault operations, string requestId, string applicationId)
            {
                return operations.FinishRequestAsync(requestId, applicationId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Complete certificate request
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='requestId'>
            /// </param>
            /// <param name='applicationId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<FinishRequestApiModel> FinishRequestAsync(this IOpcVault operations, string requestId, string applicationId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.FinishRequestWithHttpMessagesAsync(requestId, applicationId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// returns the status
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static StatusApiModel GetStatus(this IOpcVault operations)
            {
                return operations.GetStatusAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// returns the status
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<StatusApiModel> GetStatusAsync(this IOpcVault operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetStatusWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
