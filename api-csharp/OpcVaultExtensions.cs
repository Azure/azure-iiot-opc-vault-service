// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator 1.0.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.IIoT.OpcUa.Api.Vault
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for OpcVault.
    /// </summary>
    public static partial class OpcVaultExtensions
    {
            /// <summary>
            /// Register new application.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='application'>
            /// </param>
            public static ApplicationRecordApiModel RegisterApplication(this IOpcVault operations, ApplicationRecordApiModel application = default(ApplicationRecordApiModel))
            {
                return operations.RegisterApplicationAsync(application).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Register new application.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='application'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ApplicationRecordApiModel> RegisterApplicationAsync(this IOpcVault operations, ApplicationRecordApiModel application = default(ApplicationRecordApiModel), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.RegisterApplicationWithHttpMessagesAsync(application, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get application.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='applicationId'>
            /// </param>
            public static ApplicationRecordApiModel GetApplication(this IOpcVault operations, string applicationId)
            {
                return operations.GetApplicationAsync(applicationId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get application.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='applicationId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ApplicationRecordApiModel> GetApplicationAsync(this IOpcVault operations, string applicationId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetApplicationWithHttpMessagesAsync(applicationId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update application.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='applicationId'>
            /// </param>
            /// <param name='application'>
            /// </param>
            public static ApplicationRecordApiModel UpdateApplication(this IOpcVault operations, string applicationId, ApplicationRecordApiModel application = default(ApplicationRecordApiModel))
            {
                return operations.UpdateApplicationAsync(applicationId, application).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update application.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='applicationId'>
            /// </param>
            /// <param name='application'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ApplicationRecordApiModel> UpdateApplicationAsync(this IOpcVault operations, string applicationId, ApplicationRecordApiModel application = default(ApplicationRecordApiModel), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateApplicationWithHttpMessagesAsync(applicationId, application, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete application.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='applicationId'>
            /// </param>
            /// <param name='force'>
            /// </param>
            public static void DeleteApplication(this IOpcVault operations, string applicationId, bool? force = default(bool?))
            {
                operations.DeleteApplicationAsync(applicationId, force).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete application.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='applicationId'>
            /// </param>
            /// <param name='force'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteApplicationAsync(this IOpcVault operations, string applicationId, bool? force = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteApplicationWithHttpMessagesAsync(applicationId, force, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Approve or reject new application.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='applicationId'>
            /// </param>
            /// <param name='approved'>
            /// </param>
            /// <param name='force'>
            /// </param>
            public static ApplicationRecordApiModel ApproveApplication(this IOpcVault operations, string applicationId, bool approved, bool? force = default(bool?))
            {
                return operations.ApproveApplicationAsync(applicationId, approved, force).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Approve or reject new application.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='applicationId'>
            /// </param>
            /// <param name='approved'>
            /// </param>
            /// <param name='force'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ApplicationRecordApiModel> ApproveApplicationAsync(this IOpcVault operations, string applicationId, bool approved, bool? force = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApproveApplicationWithHttpMessagesAsync(applicationId, approved, force, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Unregister application.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='applicationId'>
            /// </param>
            public static ApplicationRecordApiModel UnregisterApplication(this IOpcVault operations, string applicationId)
            {
                return operations.UnregisterApplicationAsync(applicationId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Unregister application.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='applicationId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ApplicationRecordApiModel> UnregisterApplicationAsync(this IOpcVault operations, string applicationId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UnregisterApplicationWithHttpMessagesAsync(applicationId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Find applications
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='uri'>
            /// </param>
            public static IList<ApplicationRecordApiModel> ListApplications(this IOpcVault operations, string uri)
            {
                return operations.ListApplicationsAsync(uri).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Find applications
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='uri'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<ApplicationRecordApiModel>> ListApplicationsAsync(this IOpcVault operations, string uri, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListApplicationsWithHttpMessagesAsync(uri, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Query applications
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='query'>
            /// </param>
            /// <param name='anyState'>
            /// </param>
            public static QueryApplicationsResponseApiModel QueryApplications(this IOpcVault operations, QueryApplicationsApiModel query = default(QueryApplicationsApiModel), bool? anyState = default(bool?))
            {
                return operations.QueryApplicationsAsync(query, anyState).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Query applications
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='query'>
            /// </param>
            /// <param name='anyState'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<QueryApplicationsResponseApiModel> QueryApplicationsAsync(this IOpcVault operations, QueryApplicationsApiModel query = default(QueryApplicationsApiModel), bool? anyState = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.QueryApplicationsWithHttpMessagesAsync(query, anyState, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Query applications
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='query'>
            /// </param>
            /// <param name='anyState'>
            /// </param>
            public static QueryApplicationsPageResponseApiModel QueryApplicationsPage(this IOpcVault operations, QueryApplicationsPageApiModel query = default(QueryApplicationsPageApiModel), bool? anyState = default(bool?))
            {
                return operations.QueryApplicationsPageAsync(query, anyState).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Query applications
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='query'>
            /// </param>
            /// <param name='anyState'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<QueryApplicationsPageResponseApiModel> QueryApplicationsPageAsync(this IOpcVault operations, QueryApplicationsPageApiModel query = default(QueryApplicationsPageApiModel), bool? anyState = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.QueryApplicationsPageWithHttpMessagesAsync(query, anyState, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static CertificateGroupListApiModel GetCertificateGroups(this IOpcVault operations)
            {
                return operations.GetCertificateGroupsAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CertificateGroupListApiModel> GetCertificateGroupsAsync(this IOpcVault operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetCertificateGroupsWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get group configuration
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='group'>
            /// </param>
            public static CertificateGroupConfigurationApiModel GetCertificateGroupConfiguration(this IOpcVault operations, string group)
            {
                return operations.GetCertificateGroupConfigurationAsync(group).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get group configuration
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='group'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CertificateGroupConfigurationApiModel> GetCertificateGroupConfigurationAsync(this IOpcVault operations, string group, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetCertificateGroupConfigurationWithHttpMessagesAsync(group, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update group configuration
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='group'>
            /// </param>
            /// <param name='config'>
            /// </param>
            public static CertificateGroupConfigurationApiModel UpdateCertificateGroupConfiguration(this IOpcVault operations, string group, CertificateGroupConfigurationApiModel config = default(CertificateGroupConfigurationApiModel))
            {
                return operations.UpdateCertificateGroupConfigurationAsync(group, config).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update group configuration
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='group'>
            /// </param>
            /// <param name='config'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CertificateGroupConfigurationApiModel> UpdateCertificateGroupConfigurationAsync(this IOpcVault operations, string group, CertificateGroupConfigurationApiModel config = default(CertificateGroupConfigurationApiModel), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateCertificateGroupConfigurationWithHttpMessagesAsync(group, config, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete group configuration
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='group'>
            /// </param>
            public static void DeleteCertificateGroup(this IOpcVault operations, string group)
            {
                operations.DeleteCertificateGroupAsync(group).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete group configuration
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='group'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteCertificateGroupAsync(this IOpcVault operations, string group, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteCertificateGroupWithHttpMessagesAsync(group, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Create new group configuration
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='group'>
            /// </param>
            /// <param name='subject'>
            /// </param>
            /// <param name='certType'>
            /// </param>
            public static CertificateGroupConfigurationApiModel CreateCertificateGroup(this IOpcVault operations, string group, string subject, string certType)
            {
                return operations.CreateCertificateGroupAsync(group, subject, certType).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create new group configuration
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='group'>
            /// </param>
            /// <param name='subject'>
            /// </param>
            /// <param name='certType'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CertificateGroupConfigurationApiModel> CreateCertificateGroupAsync(this IOpcVault operations, string group, string subject, string certType, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateCertificateGroupWithHttpMessagesAsync(group, subject, certType, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get group configuration
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static CertificateGroupConfigurationCollectionApiModel GetCertificateGroupsConfiguration(this IOpcVault operations)
            {
                return operations.GetCertificateGroupsConfigurationAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get group configuration
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CertificateGroupConfigurationCollectionApiModel> GetCertificateGroupsConfigurationAsync(this IOpcVault operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetCertificateGroupsConfigurationWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get Issuer CA Certificate chain
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='group'>
            /// </param>
            /// <param name='maxResults'>
            /// </param>
            public static X509Certificate2CollectionApiModel GetCertificateGroupIssuerCAChain(this IOpcVault operations, string group, int? maxResults = default(int?))
            {
                return operations.GetCertificateGroupIssuerCAChainAsync(group, maxResults).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get Issuer CA Certificate chain
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='group'>
            /// </param>
            /// <param name='maxResults'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<X509Certificate2CollectionApiModel> GetCertificateGroupIssuerCAChainAsync(this IOpcVault operations, string group, int? maxResults = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetCertificateGroupIssuerCAChainWithHttpMessagesAsync(group, maxResults, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get Issuer CA Certificate chain
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='group'>
            /// </param>
            /// <param name='nextPageLink'>
            /// </param>
            /// <param name='maxResults'>
            /// </param>
            public static X509Certificate2CollectionApiModel GetCertificateGroupIssuerCAChainNext(this IOpcVault operations, string group, string nextPageLink = default(string), int? maxResults = default(int?))
            {
                return operations.GetCertificateGroupIssuerCAChainNextAsync(group, nextPageLink, maxResults).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get Issuer CA Certificate chain
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='group'>
            /// </param>
            /// <param name='nextPageLink'>
            /// </param>
            /// <param name='maxResults'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<X509Certificate2CollectionApiModel> GetCertificateGroupIssuerCAChainNextAsync(this IOpcVault operations, string group, string nextPageLink = default(string), int? maxResults = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetCertificateGroupIssuerCAChainNextWithHttpMessagesAsync(group, nextPageLink, maxResults, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get Issuer CA CRL chain
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='group'>
            /// </param>
            /// <param name='maxResults'>
            /// </param>
            public static X509CrlCollectionApiModel GetCertificateGroupIssuerCACrlChain(this IOpcVault operations, string group, int? maxResults = default(int?))
            {
                return operations.GetCertificateGroupIssuerCACrlChainAsync(group, maxResults).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get Issuer CA CRL chain
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='group'>
            /// </param>
            /// <param name='maxResults'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<X509CrlCollectionApiModel> GetCertificateGroupIssuerCACrlChainAsync(this IOpcVault operations, string group, int? maxResults = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetCertificateGroupIssuerCACrlChainWithHttpMessagesAsync(group, maxResults, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get Issuer CA CRL chain
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='group'>
            /// </param>
            /// <param name='nextPageLink'>
            /// </param>
            /// <param name='maxResults'>
            /// </param>
            public static X509CrlCollectionApiModel GetCertificateGroupIssuerCACrlChainNext(this IOpcVault operations, string group, string nextPageLink = default(string), int? maxResults = default(int?))
            {
                return operations.GetCertificateGroupIssuerCACrlChainNextAsync(group, nextPageLink, maxResults).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get Issuer CA CRL chain
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='group'>
            /// </param>
            /// <param name='nextPageLink'>
            /// </param>
            /// <param name='maxResults'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<X509CrlCollectionApiModel> GetCertificateGroupIssuerCACrlChainNextAsync(this IOpcVault operations, string group, string nextPageLink = default(string), int? maxResults = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetCertificateGroupIssuerCACrlChainNextWithHttpMessagesAsync(group, nextPageLink, maxResults, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get trust list
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='group'>
            /// </param>
            /// <param name='maxResults'>
            /// </param>
            public static TrustListApiModel GetCertificateGroupTrustList(this IOpcVault operations, string group, int? maxResults = default(int?))
            {
                return operations.GetCertificateGroupTrustListAsync(group, maxResults).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get trust list
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='group'>
            /// </param>
            /// <param name='maxResults'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<TrustListApiModel> GetCertificateGroupTrustListAsync(this IOpcVault operations, string group, int? maxResults = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetCertificateGroupTrustListWithHttpMessagesAsync(group, maxResults, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get trust list
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='group'>
            /// </param>
            /// <param name='nextPageLink'>
            /// </param>
            /// <param name='maxResults'>
            /// </param>
            public static TrustListApiModel GetCertificateGroupTrustListNext(this IOpcVault operations, string group, string nextPageLink = default(string), int? maxResults = default(int?))
            {
                return operations.GetCertificateGroupTrustListNextAsync(group, nextPageLink, maxResults).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get trust list
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='group'>
            /// </param>
            /// <param name='nextPageLink'>
            /// </param>
            /// <param name='maxResults'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<TrustListApiModel> GetCertificateGroupTrustListNextAsync(this IOpcVault operations, string group, string nextPageLink = default(string), int? maxResults = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetCertificateGroupTrustListNextWithHttpMessagesAsync(group, nextPageLink, maxResults, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create new CA Certificate
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='group'>
            /// </param>
            public static X509Certificate2ApiModel CreateCertificateGroupIssuerCACert(this IOpcVault operations, string group)
            {
                return operations.CreateCertificateGroupIssuerCACertAsync(group).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create new CA Certificate
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='group'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<X509Certificate2ApiModel> CreateCertificateGroupIssuerCACertAsync(this IOpcVault operations, string group, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateCertificateGroupIssuerCACertWithHttpMessagesAsync(group, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Start a new signing request.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='signingRequest'>
            /// </param>
            public static string CreateSigningRequest(this IOpcVault operations, CreateSigningRequestApiModel signingRequest = default(CreateSigningRequestApiModel))
            {
                return operations.CreateSigningRequestAsync(signingRequest).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Start a new signing request.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='signingRequest'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> CreateSigningRequestAsync(this IOpcVault operations, CreateSigningRequestApiModel signingRequest = default(CreateSigningRequestApiModel), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateSigningRequestWithHttpMessagesAsync(signingRequest, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Start a new key pair request.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='newKeyPairRequest'>
            /// </param>
            public static string CreateNewKeyPairRequest(this IOpcVault operations, CreateNewKeyPairRequestApiModel newKeyPairRequest = default(CreateNewKeyPairRequestApiModel))
            {
                return operations.CreateNewKeyPairRequestAsync(newKeyPairRequest).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Start a new key pair request.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='newKeyPairRequest'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> CreateNewKeyPairRequestAsync(this IOpcVault operations, CreateNewKeyPairRequestApiModel newKeyPairRequest = default(CreateNewKeyPairRequestApiModel), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateNewKeyPairRequestWithHttpMessagesAsync(newKeyPairRequest, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Approve request.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='requestId'>
            /// </param>
            /// <param name='rejected'>
            /// </param>
            public static void ApproveCertificateRequest(this IOpcVault operations, string requestId, bool rejected)
            {
                operations.ApproveCertificateRequestAsync(requestId, rejected).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Approve request.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='requestId'>
            /// </param>
            /// <param name='rejected'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApproveCertificateRequestAsync(this IOpcVault operations, string requestId, bool rejected, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ApproveCertificateRequestWithHttpMessagesAsync(requestId, rejected, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Accept request.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='requestId'>
            /// </param>
            public static void AcceptCertificateRequest(this IOpcVault operations, string requestId)
            {
                operations.AcceptCertificateRequestAsync(requestId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Accept request.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='requestId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task AcceptCertificateRequestAsync(this IOpcVault operations, string requestId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.AcceptCertificateRequestWithHttpMessagesAsync(requestId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Read certificate request
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='requestId'>
            /// </param>
            public static CertificateRequestRecordApiModel GetCertificateRequest(this IOpcVault operations, string requestId)
            {
                return operations.GetCertificateRequestAsync(requestId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Read certificate request
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='requestId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CertificateRequestRecordApiModel> GetCertificateRequestAsync(this IOpcVault operations, string requestId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetCertificateRequestWithHttpMessagesAsync(requestId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete request.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='requestId'>
            /// </param>
            public static void DeleteCertificateRequest(this IOpcVault operations, string requestId)
            {
                operations.DeleteCertificateRequestAsync(requestId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete request.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='requestId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteCertificateRequestAsync(this IOpcVault operations, string requestId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteCertificateRequestWithHttpMessagesAsync(requestId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Purge request.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='requestId'>
            /// </param>
            public static void PurgeCertificateRequest(this IOpcVault operations, string requestId)
            {
                operations.PurgeCertificateRequestAsync(requestId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Purge request.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='requestId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PurgeCertificateRequestAsync(this IOpcVault operations, string requestId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.PurgeCertificateRequestWithHttpMessagesAsync(requestId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Revoke request.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='requestId'>
            /// </param>
            public static void RevokeCertificateRequest(this IOpcVault operations, string requestId)
            {
                operations.RevokeCertificateRequestAsync(requestId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Revoke request.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='requestId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task RevokeCertificateRequestAsync(this IOpcVault operations, string requestId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.RevokeCertificateRequestWithHttpMessagesAsync(requestId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Revoke all deleted requests.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='group'>
            /// </param>
            /// <param name='allVersions'>
            /// </param>
            public static void RevokeGroup(this IOpcVault operations, string group, bool? allVersions = default(bool?))
            {
                operations.RevokeGroupAsync(group, allVersions).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Revoke all deleted requests.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='group'>
            /// </param>
            /// <param name='allVersions'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task RevokeGroupAsync(this IOpcVault operations, string group, bool? allVersions = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.RevokeGroupWithHttpMessagesAsync(group, allVersions, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Query certificate requests
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='appId'>
            /// </param>
            /// <param name='requestState'>
            /// </param>
            /// <param name='maxResults'>
            /// </param>
            public static CertificateRequestRecordQueryResponseApiModel QueryCertificateRequests(this IOpcVault operations, string appId = default(string), string requestState = default(string), int? maxResults = default(int?))
            {
                return operations.QueryCertificateRequestsAsync(appId, requestState, maxResults).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Query certificate requests
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='appId'>
            /// </param>
            /// <param name='requestState'>
            /// </param>
            /// <param name='maxResults'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CertificateRequestRecordQueryResponseApiModel> QueryCertificateRequestsAsync(this IOpcVault operations, string appId = default(string), string requestState = default(string), int? maxResults = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.QueryCertificateRequestsWithHttpMessagesAsync(appId, requestState, maxResults, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Query certificate requests
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// </param>
            /// <param name='appId'>
            /// </param>
            /// <param name='requestState'>
            /// </param>
            /// <param name='maxResults'>
            /// </param>
            public static CertificateRequestRecordQueryResponseApiModel QueryCertificateRequestsNext(this IOpcVault operations, string nextPageLink = default(string), string appId = default(string), string requestState = default(string), int? maxResults = default(int?))
            {
                return operations.QueryCertificateRequestsNextAsync(nextPageLink, appId, requestState, maxResults).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Query certificate requests
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// </param>
            /// <param name='appId'>
            /// </param>
            /// <param name='requestState'>
            /// </param>
            /// <param name='maxResults'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CertificateRequestRecordQueryResponseApiModel> QueryCertificateRequestsNextAsync(this IOpcVault operations, string nextPageLink = default(string), string appId = default(string), string requestState = default(string), int? maxResults = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.QueryCertificateRequestsNextWithHttpMessagesAsync(nextPageLink, appId, requestState, maxResults, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Fetch certificate request results
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='requestId'>
            /// </param>
            /// <param name='applicationId'>
            /// </param>
            public static FetchRequestResultApiModel FetchCertificateRequestResult(this IOpcVault operations, string requestId, string applicationId)
            {
                return operations.FetchCertificateRequestResultAsync(requestId, applicationId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Fetch certificate request results
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='requestId'>
            /// </param>
            /// <param name='applicationId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<FetchRequestResultApiModel> FetchCertificateRequestResultAsync(this IOpcVault operations, string requestId, string applicationId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.FetchCertificateRequestResultWithHttpMessagesAsync(requestId, applicationId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// returns the status
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static StatusApiModel GetStatus(this IOpcVault operations)
            {
                return operations.GetStatusAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// returns the status
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<StatusApiModel> GetStatusAsync(this IOpcVault operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetStatusWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
